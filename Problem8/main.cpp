#include <iostream>
#include <string>
#include <chrono>

using namespace std;
using namespace std::chrono;

long long findDigits() {

    long long maxProd = 0;
    string s = "73167176531330624919225119674426574742355349194934"
               "96983520312774506326239578318016984801869478851843"
               "85861560789112949495459501737958331952853208805511"
               "12540698747158523863050715693290963295227443043557"
               "66896648950445244523161731856403098711121722383113"
               "62229893423380308135336276614282806444486645238749"
               "30358907296290491560440772390713810515859307960866"
               "12188399879790879227492169972088809377665727333001"
               "05336788122023542180975125454059475224352684797141"
               "56988588575272489122793818301194912983367336244065"
               "66430860213949463952247371907021798609437027705392"
               "17176293176752384674818467669405132000568127145263"
               "56082778577134275778960917363717872146844090122495"
               "34301465495853710507922796892589235420199561121290"
               "21960864034418159813629774771309960518707211349999"
               "99837297804995105973173281609631859502445945534690";

    for (size_t i = 0; i <= s.size() - 13; i++) {

        long long product = 1;

        for (size_t j = i; j < i + 12; j++) {
            product *= (s[j] - '0');
        }


        if (product > maxProd) maxProd = product;
    }

    return maxProd;
}

int main() {

    auto start = high_resolution_clock::now();

    cout << "The answer is: " << findDigits() << "\n";

    auto end = high_resolution_clock::now();
    auto duration = duration_cast<microseconds>(end - start);

    cout << "Execution time: " << duration.count() << " microseconds\n";

    return 0;
}
